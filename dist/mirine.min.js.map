{"version":3,"file":"mirine.min.js","mappings":"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","sources":["webpack://mirine/webpack/universalModuleDefinition","webpack://mirine/webpack/bootstrap","webpack://mirine/webpack/runtime/define property getters","webpack://mirine/webpack/runtime/hasOwnProperty shorthand","webpack://mirine/webpack/runtime/make namespace object","webpack://mirine/./src/lib/utils/string-utils.js","webpack://mirine/./src/lib/saram/registrationNo.js","webpack://mirine/./src/lib/saram/validateKoreanName.js","webpack://mirine/./src/lib/saram/constants/index.js","webpack://mirine/./src/lib/saram/index.js","webpack://mirine/./src/lib/saram/getGender.js","webpack://mirine/./src/lib/company/isCorporateRegistrationNo.js","webpack://mirine/./src/lib/company/Corporation.js","webpack://mirine/./src/lib/company/index.js","webpack://mirine/./src/lib/company/isCompanyRegistrationNo.js","webpack://mirine/./src/lib/company/getCorpType.js","webpack://mirine/./src/lib/hangeul/josa/constants.js","webpack://mirine/./src/lib/hangeul/susa/constants.js","webpack://mirine/./src/lib/hangeul/susa/numberToGisusa.js","webpack://mirine/./src/lib/hangeul/getJongseongIndex.js","webpack://mirine/./src/lib/hangeul/isEndWithBatchim.js","webpack://mirine/./src/lib/hangeul/josa/getJosa.js","webpack://mirine/./src/lib/hangeul/josa/index.js","webpack://mirine/./src/lib/hangeul/index.js","webpack://mirine/./src/lib/hangeul/josa/eulreul.js","webpack://mirine/./src/lib/hangeul/josa/eunneun.js","webpack://mirine/./src/lib/hangeul/josa/eulo.js","webpack://mirine/./src/lib/hangeul/josa/iga.js","webpack://mirine/./src/lib/hangeul/josa/wagwa.js","webpack://mirine/./src/lib/hangeul/susa/index.js","webpack://mirine/./src/lib/misc/validateEmail.js","webpack://mirine/./src/lib/misc/validateURL.js","webpack://mirine/./src/lib/misc/validateIPv4.js","webpack://mirine/./src/lib/misc/index.js","webpack://mirine/./src/lib/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"mirine\"] = factory();\n\telse\n\t\troot[\"mirine\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * 문자관련 도구모음\n *\n * @ignore\n * @author hkcho\n */\nclass StringUtils {\n  constructor() {\n    // eslint-disable-next-line no-throw-literal\n    throw '인스턴스화 할 수 없습니다.';\n  }\n\n  /**\n   * 알파벳과 숫자로 이루어져 있는지 검사\n   *\n   * @param {string} str 검사할 문자열\n   *\n   * @author hkcho\n   */\n  static isAlphaNumeric(str) {\n    if (/\\s/g.test(str) || /[^a-zA-Z0-9]/g.test(str)) {\n      return false;\n    }\n    return /[\\w\\d]/g.test(str);\n  }\n\n  /**\n   * 숫자 형식의 문자열인지 검사\n   *\n   * @param {string | number} str 검사할 문자열\n   *\n   * @author hkcho\n   */\n  static isNumeric(str) {\n    if (typeof str !== 'string') return false;\n    return !Number.isNaN(str) && !Number.isNaN(parseFloat(str));\n  }\n}\n\nexport default StringUtils;\n\n// 완성형 한글 정규식\nexport const REGEX_COMPLETE_KOREAN = /^[가-힣]+$/;\n","import StringUtils from '../utils/string-utils';\n\nexport { validateRegistrationNumber };\n\n/**\n * 주민등록번호 또는 외국인등록번호인지 확인.\n *\n * @method\n * @ignore\n * @param {string} registrationNo 주민 또는 외국인 등록번호\n * @param {string} type {@link RegNoTypes 등록번호 타입}\n * @returns {boolean} 주민/외국인 번호의 유효성\n */\nfunction validateRegistrationNumber(registrationNo, type) {\n  const rn = `${registrationNo}`.trim().split('-').join(''); // 하이픈(-)이 있을경우 제거\n\n  // 등록번호 형태의 문자열이 아님\n  if (!StringUtils.isNumeric(rn) || rn.length !== 13) {\n    return false;\n  }\n\n  let checkSum = 0; // 검증값 합계\n  for (let i = 0; i < 12; i++)\n    checkSum += (rn.substr(i, 1) >> 0) * ((i % 8) + 2);\n\n  // 주민등록번호 매치\n  const rrnMatch = `${(11 - (checkSum % 11)) % 10}` === rn.substr(12, 1);\n  // 외국인등록번호 매치\n  const frnMatch = `${(13 - (checkSum % 11)) % 10}` === rn.substr(12, 1);\n\n  if (type === RegNoTypes.RRN) return rrnMatch;\n  if (type === RegNoTypes.FRN) return frnMatch;\n  return rrnMatch || frnMatch;\n}\n\n/**\n * 등록번호타입\n *\n * @ignore\n * @constant\n * @name 등록번호 타입\n * @namespace RegNoTypes\n */\nexport const RegNoTypes = Object.freeze({\n  /**\n   * 주민등록번호\n   * @memberOf RegNoTypes\n   * @inner\n   */\n  RRN: 'rrn',\n  /**\n   * 외국인등록번호\n   * @memberOf RegNoTypes\n   * @inner\n   */\n  FRN: 'frn',\n});\n","import { REGEX_COMPLETE_KOREAN } from '../utils/string-utils';\n\nexport default {\n  validateKoreanName,\n};\n\n/**\n * 한글 이름을 유효성검사 합니다.\n *\n * <pre>\n *     - \"조현권\", \"남궁현권\", \"황금독수리\", \"고고한허수아비\"  => true\n *     - \"조 현권\", \"\", \"조현권ㅏ\", \"조현ㄱ\", \"조\"        => false\n * </pre>\n *\n * @method\n * @see REGEX_COMPLETE_KOREAN\n * @param name {string} 한글이름\n * @returns {boolean} 한글이름 유효성\n *\n * @author hkcho\n */\nexport function validateKoreanName(name) {\n  // 입력값이 '문자열이 아니'거나 '공백문자'거나 '한 글자'일 경우\n  if (typeof name !== 'string' || name.trim().length <= 1) return false;\n\n  return name.match(REGEX_COMPLETE_KOREAN) !== null;\n}\n","/**\n * 주민등록번호상 성별\n * @type {{MALE: string, FEMALE: string}}\n */\nconst Gender = {\n  /** 여성 */\n  FEMALE: 'F',\n  /** 남성 */\n  MALE: 'M',\n};\n\nexport default {\n  Gender\n};\n","import { RegNoTypes, validateRegistrationNumber } from './registrationNo';\nimport { validateKoreanName } from './validateKoreanName';\nimport getGender from './getGender';\n\n/**\n * 사람과 관련된 도구모음\n */\nexport default {\n  isRegistrationNo, // 주민/외국인 등록번호 검사\n  isJuminRegistrationNo, // 주민등록번호 검사\n  isForeignRegistrationNo, // 외국인 등록번호 검사\n  getGender, // '생년', '성별숫자'로 성별 확인\n  validateKoreanName, // 한글이름 유효성검사\n};\n\n/**\n * 주민등록번호 또는 외국인등록번호인지 확인.\n *\n * @see validateRegistrationNumber\n * @param {string} registrationNo 주민 또는 외국인 등록번호\n * @returns {boolean} 주민/외국인 번호의 유효성\n */\nfunction isRegistrationNo(registrationNo) {\n  return validateRegistrationNumber(registrationNo);\n}\n\n/**\n * 주민등록번호 여부 확인.\n *\n * @see validateRegistrationNumber\n * @param {string} registrationNo 주민등록번호\n * @returns {boolean} 주민등록번호 유효성\n */\nfunction isJuminRegistrationNo(registrationNo) {\n  return validateRegistrationNumber(registrationNo, RegNoTypes.RRN);\n}\n\n/**\n * 외국인등록번호 여부 확인.\n *\n * @see validateRegistrationNumber\n * @param {string} registrationNo 외국인등록번호\n * @returns {boolean} 외국인등록번호 유효성\n */\nfunction isForeignRegistrationNo(registrationNo) {\n  return validateRegistrationNumber(registrationNo, RegNoTypes.FRN);\n}\n","import Gender from './constants';\nimport StringUtils from '../utils/string-utils';\n\n/**\n * 주민/외국인 등록번호상 '생년'과 주민등록번호 뒷자리 첫번째 수로 성별을 확인합니다.\n * - 확인할 수 없는 조합의 경우 `null`을 반환합니다\n *\n * <i>[올바른 사용]</i>\n * <pre>\n *     saram.getGender(1988, 1)\n *     saram.getGender('1988', '1')\n * </pre>\n *\n * <i>[잘못된 사용]</i>\n * <pre>\n *     saram.getGender(88, 1)\n *     saram.getGender('88', '1')\n *     saram.getGender('88', '312')\n * </pre>\n *\n * @param {string | number} birthYear 생년\n * @param {string | number} regno0 성별 숫자\n * @return {string | null} 남성: 'M', 여성: 'F', 알 수 없음: null\n *\n * @author hkcho\n */\nexport default function getGender(birthYear, regno0) {\n  // 올바르지 않은 생년 - 숫자형태의 문자열이 아닐경우\n  if (!StringUtils.isNumeric(`${birthYear}`)) {\n    return null;\n  }\n\n  // 올바르지 않은 생년 - 4자리 수가 아닐경우\n  if (`${birthYear}`.length !== 4) {\n    return null;\n  }\n\n  // 생년 - 4자리수\n  const bYear = birthYear >> 0;\n\n  // 올바르지 않은 성별 번호\n  if (\n    typeof regno0 === 'undefined' ||\n    regno0 === null ||\n    `${regno0}`.trim().length === 0\n  ) {\n    return null;\n  }\n\n  // 주민등록번호 성별\n  const r0 = regno0 >> 0;\n\n  // 주민등록번호 첫번 째 자리가 0 ~ 9 사이의 숫자가 아닐 경우\n  if (r0 < 0 || r0 > 9) {\n    return null;\n  }\n\n  // 1900년 이전 출생자 ( ~ 1899년)\n  if (bYear < 1900) {\n    // 한국남성\n    if (r0 === 9) return Gender.MALE;\n    // 한국여성\n    if (r0 === 0) return Gender.FEMALE;\n\n    return null;\n  }\n\n  // 1900년대 출생자 (1900년 ~ 1999년)\n  if (bYear >= 1900 && bYear < 2000) {\n    // 한국남성\n    if (r0 === 1) return Gender.MALE;\n    // 한국여성\n    if (r0 === 2) return Gender.FEMALE;\n    // 외국남성\n    if (r0 === 5) return Gender.MALE;\n    // 외국여성\n    if (r0 === 6) return Gender.FEMALE;\n    return null;\n  }\n\n  // 2000년대 출생자 (2000년 ~ ). 2100년에 업데이트가 필요합니다.\n  if (bYear >= 2000) {\n    // 한국남성\n    if (r0 === 3) return Gender.MALE;\n    // 한국여성\n    if (r0 === 4) return Gender.FEMALE;\n    // 외국남성\n    if (r0 === 7) return Gender.MALE;\n    // 외국여성\n    if (r0 === 8) return Gender.FEMALE;\n    return null;\n  }\n\n  return null;\n}\n","import StringUtils from '../utils/string-utils';\n\n/**\n * 법인 등록번호 유효성 검사\n *\n * 참고: [법인및재외국민의부동산등기용등록번호부여에관한규칙]{@link https://www.law.go.kr/LSW/lsInfoP.do?lsiSeq=57867#0000}\n *\n * @param {string} registrationNo 법인등록번호\n * @returns {boolean} 법인등록번호 유효성\n *\n * @author hkcho\n */\nexport default function isCorporateRegistrationNo(registrationNo) {\n  const rn = `${registrationNo}`.trim().split('-').join(''); // 하이픈(-)이 있을경우 제거\n\n  // 법인등록번호 형태의 문자열이 아님\n  if (!StringUtils.isNumeric(rn) || rn.length !== 13) {\n    return false;\n  }\n  let checkSum = 0; // 검증값 합계\n  for (let i = 0; i < 12; i++)\n    checkSum += (rn.substr(i, 1) >> 0) * ((i % 2) + 1);\n\n  return `${(10 - (checkSum % 10)) % 10}` === rn.substr(12, 1);\n}\n","import isCorporateRegistrationNo from './isCorporateRegistrationNo';\n\n/**\n * 법인\n *\n * @since 1.0.0\n *\n * @author hkcho\n */\nclass Corporation {\n  /** 법인번호 */\n  registrationNo = null;\n\n  constructor(corporationData) {\n    if (typeof corporationData === 'object') {\n      // 법인 등록번호\n      if (corporationData.registrationNo)\n        this.registrationNo = corporationData.registrationNo;\n    }\n  }\n\n  /**\n   * 법인번호 유효성검사\n   * @return {boolean} 법인번호 유효성\n   */\n  isValidCorpRegistrationNo() {\n    return isCorporateRegistrationNo(this.registrationNo);\n  }\n\n  /**\n   * 법인종류 조회\n   */\n  getType() {\n    if (!this.isValidCorpRegistrationNo()) return null;\n\n    // 법인종류별 분류번호 추출\n    const categoryNo = extractCategoryNo(this.registrationNo);\n\n    // 법인종류\n    let type = null;\n\n    // 분류번호로 법인종류 찾기 TODO Refactoring\n    for (const categoryNm of Object.keys(Corporation.category)) {\n      const category = Corporation.category[categoryNm];\n      if (categoryNo === category.no) {\n        type = category.type;\n        break;\n      }\n    }\n    return type;\n  }\n\n  /**\n   * 법률근거 조회\n   */\n  getLegalBasis() {\n    if (!this.isValidCorpRegistrationNo()) return null;\n\n    // 법인종류별 분류번호 추출\n    const categoryNo = extractCategoryNo(this.registrationNo);\n\n    // 법률근거\n    let legalBasis = null;\n\n    // 분류번호로 법률근거 찾기 TODO Refactoring\n    for (const categoryNm of Object.keys(Corporation.category)) {\n      const category = Corporation.category[categoryNm];\n      if (categoryNo === category.no) {\n        legalBasis = category.legalBasis;\n        break;\n      }\n    }\n    return legalBasis;\n  }\n\n  /**\n   * 법인종류\n   *\n   * @readonly\n   * @constant\n   */\n  static types = {\n    /** 상법법인 */\n    COMMERCIAL: {\n      value: 'commercial',\n      label: '상법법인',\n    },\n    /** 민법법인 */\n    CIVIL: {\n      value: 'civil',\n      label: '민법법인',\n    },\n    /** 특수법인 */\n    SPECIAL: {\n      value: 'special',\n      label: '특수법인',\n    },\n    /** 외국법인 */\n    FOREIGN: {\n      value: 'foreign',\n      label: '외국법인',\n    },\n    /** 기타법인 */\n    ETC: {\n      value: 'etc',\n      label: '기타',\n    },\n  };\n\n  /**\n   * 법률근거\n   *\n   * @readonly\n   * @constant\n   */\n  static legalBasis = {\n    /** 상법 */\n    COMMERCIAL: {\n      value: 'commercial',\n      label: '상법',\n      type: Corporation.types.COMMERCIAL,\n    },\n    /** 민법 */\n    CIVIL: {\n      value: 'civil',\n      label: '민법',\n      type: Corporation.types.CIVIL,\n    },\n    /** 사립학교법 */\n    PRIVATE_SCHOOL: {\n      value: 'private_school',\n      label: '사립학교법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 사회복지사법 */\n    SOCIAL_WORKER: {\n      value: 'social_worker',\n      label: '사회복지사법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 의료법 */\n    MEDICAL: {\n      value: 'medical',\n      label: '의료법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 공인회계사법 */\n    CERTIFIED_ACCOUNTANT: {\n      value: 'certified_accountant',\n      label: '공인회계사법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 한국은행법등 */\n    BANK_OF_KOREA: {\n      value: 'bank_of_korea',\n      label: '한국은행법등',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 농업협동조합법 */\n    ALPC_COOP: {\n      value: 'agricultural_cooperatives',\n      label: '농업협동조합법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 축산업협동조합법 */\n    LIVESTOCK_COOP: {\n      value: 'livestock_cooperatives',\n      label: '축산업협동조합법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 수산업협동조합법 */\n    FISHERIES_COOP: {\n      value: 'fisheries_cooperatives',\n      label: '수산업협동조합법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 산림조합법 */\n    FORESTRY_COOP: {\n      value: 'forestry_cooperatives',\n      label: '산림조합법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 중소기업협동조합법 */\n    SMALL_MEDIUM_ENTERPRISE_COOP: {\n      value: 'small_and_medium_enterprise_cooperatives',\n      label: '중소기업협동조합법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 신용협동조합법 */\n    CREDIT_COOP: {\n      value: 'credit_cooperatives',\n      label: '신용협동조합법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 농촌근대화촉진법 */\n    ALPC_CMTY_MODERN_PROMO: {\n      value: 'agricultural_community_modernization_promotion',\n      label: '농촌근대화촉진법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 노동조합법 */\n    LABOR_UNION: {\n      value: 'labor_union',\n      label: '노동조합법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 새마을금고법 */\n    CMTY_CREDIT_COOP: {\n      value: 'community_credit_cooperatives',\n      label: '새마을금고법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 의료보험조합법 */\n    MEDICAL_INS_ASSOC: {\n      value: 'medical_insurance_association',\n      label: '의료보험조합법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 변호사법 */\n    ATTORNEYS: {\n      value: 'attorneys_at_law',\n      label: '변호사법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 상공회의소법 */\n    CHAMBERS_OF_COMM_N_IND: {\n      value: 'chambers_of_commerce_and_industry',\n      label: '상공회의소법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 상호신용금고법 */\n    MUTUAL_SAVINGS_N_FIN_CO: {\n      value: 'mutual_savings_and_finance_company',\n      label: '상호신용금고법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 자동차운수사업법 */\n    AUTO_TRANS_BIZ: {\n      value: 'automobile_transport_business',\n      label: '자동차운수사업법',\n      type: Corporation.types.SPECIAL,\n    },\n    /** 공업협동조합법 */\n    MANUFACTURING_IND_COOP: {\n      value: 'manufacturing_industry_cooperatives',\n      label: '공업협동조합법',\n      type: Corporation.types.SPECIAL,\n    },\n  };\n\n  /**\n   * 법인 분류\n   *\n   * @readonly\n   * @constant\n   */\n  static category = {\n    /**\n     * 주식회사\n     */\n    CORPORATION: {\n      no: 11,\n      value: 'corporation',\n      label: '주식회사',\n      type: Corporation.types.COMMERCIAL,\n      legalBasis: Corporation.legalBasis.COMMERCIAL,\n    },\n    /** 합명회사 */\n    UNLIMITED: {\n      no: 12,\n      value: 'unlimited',\n      label: '합명회사',\n      type: Corporation.types.COMMERCIAL,\n      legalBasis: Corporation.legalBasis.COMMERCIAL,\n    },\n    /** 합자회사 */\n    PARTNERSHIP: {\n      no: 13,\n      value: 'partnership',\n      label: '합자회사',\n      type: Corporation.types.COMMERCIAL,\n      legalBasis: Corporation.legalBasis.COMMERCIAL,\n    },\n    /** 유한회사 */\n    LIMITED: {\n      no: 14,\n      value: 'limited',\n      label: '유한회사',\n      type: Corporation.types.COMMERCIAL,\n      legalBasis: Corporation.legalBasis.COMMERCIAL,\n    },\n\n    /** 사단법인 */\n    INCORPORATED_ASSOCIATION: {\n      no: 21,\n      value: 'incorporated_association',\n      label: '사단법인',\n      legalBasis: Corporation.legalBasis.CIVIL,\n    },\n    /** 재단법인 */\n    FOUNDATION: {\n      no: 22,\n      value: 'foundation',\n      label: '재단법인',\n      type: Corporation.types.CIVIL,\n      legalBasis: Corporation.legalBasis.CIVIL,\n    },\n\n    /** 학교법인 */\n    EDUCATIONAL_FOUNDATION: {\n      no: 31,\n      value: 'educational_foundation',\n      label: '학교법인',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.PRIVATE_SCHOOL,\n    },\n    /** 사회복지법인  */\n    SOCIAL_WELFARE: {\n      no: 32,\n      value: 'social_welfare',\n      label: '사회복지법인',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.SOCIAL_WORKER,\n    },\n    /** 의료법인 */\n    MEDICAL: {\n      no: 33,\n      value: 'medical',\n      label: '의료법인',\n      legalBasis: Corporation.legalBasis.MEDICAL,\n    },\n    /** 회계법인 */\n    ACCOUNTING_FIRM: {\n      no: 34,\n      value: 'accounting_firm',\n      label: '회계법인',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.CERTIFIED_ACCOUNTANT,\n    },\n    /** 특별법에 의한 은행 */\n    SPECIAL_CASE_BANK: {\n      no: 35,\n      value: 'special_case_bank',\n      label: '특별법에 의한 은행',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.BANK_OF_KOREA,\n    },\n    /** 단위농업협동조합 */\n    UNIT_ALPC_COOP: {\n      no: 36,\n      value: 'unit_agricultural_cooperatives',\n      label: '단위농업협동조합',\n      legalBasis: Corporation.legalBasis.ALPC_COOP,\n    },\n    /** 특수농업협동조합(양잠협동조합) */\n    SPECIAL_ALPC_COOP: {\n      no: 36,\n      value: 'unit_agricultural_cooperatives',\n      label: '특수농업협동조합(양잠협동조합)',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.ALPC_COOP,\n    },\n    /** 농업협동조합중앙회 */\n    ALPC_COOP_CENTER: {\n      no: 36,\n      value: 'agricultural_cooperatives_center',\n      label: '농업협동조합중앙회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.ALPC_COOP,\n    },\n\n    /** 지역별축산업협동조합 */\n    PROVINCE_LIVESTOCK_COOP: {\n      no: 37,\n      value: 'province_livestock_cooperatives',\n      label: '지역별축산업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.LIVESTOCK_COOP,\n    },\n    /** 업종별축산업협동조합 */\n    LIVESTOCK_COOP_BY_BIZ: {\n      no: 37,\n      value: 'livestock_cooperatives_by_business',\n      label: '업종별축산업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.LIVESTOCK_COOP,\n    },\n    /** 축산업협동조합중앙회 */\n    LIVESTOCK_COOP_CENTER: {\n      no: 37,\n      value: 'livestock_cooperatives_center',\n      label: '축산업협동조합중앙회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.LIVESTOCK_COOP,\n    },\n\n    /** 지역별수산업협동조합 */\n    PROVINCE_FISHERIES_COOP: {\n      no: 38,\n      value: 'province_fisheries_cooperatives',\n      label: '지역별수산업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FISHERIES_COOP,\n    },\n    /** 업종별수산업협동조합 */\n    FISHERIES_COOP_BY_BIZ: {\n      no: 38,\n      value: 'fisheries_cooperatives_by_biz',\n      label: '업종별수산업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FISHERIES_COOP,\n    },\n    /** 수산물제조업협동조합 */\n    FISHERIES_MANUFACTURAL_COOP: {\n      no: 38,\n      value: 'fisheries_manufactural_cooperatives',\n      label: '수산물제조업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FISHERIES_COOP,\n    },\n    /** 수산업협동조합중앙회 */\n    FISHERIES_COOP_CENTER: {\n      no: 38,\n      value: 'fisheries_cooperatives_center',\n      label: '수산업협동조합중앙회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FISHERIES_COOP,\n    },\n    /** 어업협동조합 */\n    FISHERIES_IND_COOP: {\n      no: 38,\n      value: 'fisheries_industry_cooperatives',\n      label: '어업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FISHERIES_COOP,\n    },\n    /** 어촌계 */\n    FISHING_VIL_FRTRNT: {\n      no: 38,\n      value: 'fishing_village_fraternities',\n      label: '어촌계',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FISHERIES_COOP,\n    },\n\n    /** 산림조합중앙회 */\n    FORESTRY_COOP_CENTER: {\n      no: 39,\n      value: 'forestry_cooperatives_center',\n      label: '산림조합중앙회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FORESTRY_COOP,\n    },\n    /** 산림조합 */\n    FORESTRY_COOP: {\n      no: 39,\n      value: 'forestry_cooperatives',\n      label: '산림조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FORESTRY_COOP,\n    },\n    /** 산림계 */\n    FOREST_VIL_FRTRNT: {\n      no: 39,\n      value: 'forest_village_fraternities',\n      label: '산림계',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.FORESTRY_COOP,\n    },\n\n    /** 지역별중소기업협동조합 */\n    PROVINCE_SMALL_MEDIUM_ENTERPRISE_COOP: {\n      no: 40,\n      value: 'province_small_and_medium_enterprise_cooperatives',\n      label: '지역별중소기업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.SMALL_MEDIUM_ENTERPRISE_COOP,\n    },\n    /** 업종별중소기업협동조합 */\n    SMALL_MEDIUM_ENTERPRISE_COOP_BY_BIZ: {\n      no: 40,\n      value: 'small_and_medium_enterprise_cooperatives_by_business',\n      label: '업종별중소기업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.SMALL_MEDIUM_ENTERPRISE_COOP,\n    },\n    /** 중소기업협동조합 */\n    SMALL_MEDIUM_ENTERPRISE_COOP: {\n      no: 40,\n      value: 'small_and_medium_enterprise_cooperatives',\n      label: '중소기업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.SMALL_MEDIUM_ENTERPRISE_COOP,\n    },\n    /** 중소기업협동조합연합회(업종별) */\n    SMALL_MEDIUM_ENTERPRISE_COOP_UNION_BY_BIZ: {\n      no: 40,\n      value: 'small_and_medium_enterprise_cooperatives_union_by_business',\n      label: '중소기업협동조합연합회(업종별)',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.SMALL_MEDIUM_ENTERPRISE_COOP,\n    },\n    /** 중소기업협동조합중앙회 */\n    SMALL_MEDIUM_ENTERPRISE_COOP_CENTER: {\n      no: 40,\n      value: 'small_and_medium_enterprise_cooperatives_center',\n      label: '중소기업협동조합중앙회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.SMALL_MEDIUM_ENTERPRISE_COOP,\n    },\n\n    /** 신용협동조합 */\n    CREDIT_COOP: {\n      no: 41,\n      value: 'credit_cooperatives',\n      label: '신용협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.CREDIT_COOP,\n    },\n    /** 신용협동조합연합회 */\n    CREDIT_COOP_UNION: {\n      no: 41,\n      value: 'credit_cooperatives_union',\n      label: '신용협동조합연합회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.CREDIT_COOP,\n    },\n\n    /** 농지개량조합 */\n    FARMLAND_IMPRV_COOP: {\n      no: 42,\n      value: 'farmland_improvement_cooperatives',\n      label: '농지개량조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.ALPC_CMTY_MODERN_PROMO,\n    },\n    /** 농지개량조합연합회 */\n    FARMLAND_IMPRV_COOP_UNION: {\n      no: 42,\n      value: 'farmland_improvement_cooperatives_union',\n      label: '농지개량조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.ALPC_CMTY_MODERN_PROMO,\n    },\n    /** 농업진흥공사 */\n    AGRICULTURAL_DEV_CORP: {\n      no: 42,\n      value: 'agricultural_development_corporation',\n      label: '농업진흥공사',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.ALPC_CMTY_MODERN_PROMO,\n    },\n\n    /** 노동조합 */\n    LABOR_UNION: {\n      no: 43,\n      value: 'labor_union',\n      label: '노동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.LABOR_UNION,\n    },\n\n    /** 새마을금고(마을금고) */\n    CMTY_CREDIT_COOP: {\n      no: 44,\n      value: 'community_credit_cooperatives',\n      label: '새마을금고(마을금고)',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.CMTY_CREDIT_COOP,\n    },\n    /** 새마을금고연합회 */\n    CMTY_CREDIT_COOP_UNION: {\n      no: 44,\n      value: 'community_credit_cooperatives_union',\n      label: '새마을금고(마을금고)',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.CMTY_CREDIT_COOP,\n    },\n\n    /** 의료보험조합 */\n    MEDICAL_INS_ASSOC: {\n      no: 45,\n      value: 'medical_insurance_association',\n      label: '의료보험조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.MEDICAL_INS_ASSOC,\n    },\n\n    /** 법무법인 */\n    LAW_FIRM: {\n      no: 46,\n      value: 'law_firm',\n      label: '법무법인',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.ATTORNEYS,\n    },\n\n    /** 상공회의소 */\n    CHAMBERS_OF_COMM_N_IND: {\n      no: 47,\n      value: 'chambers_of_commerce_and_industry',\n      label: '상공회의소',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.CHAMBERS_OF_COMM_N_IND,\n    },\n\n    /** 상호신용금고 */\n    MUTUAL_SAVINGS_N_FIN_CO: {\n      no: 48,\n      value: 'mutual_savings_and_finance_company',\n      label: '상호신용금고',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.MUTUAL_SAVINGS_N_FIN_CO,\n    },\n    /** 상호신용금고연합회 */\n    MUTUAL_SAVINGS_N_FIN_CO_UNION: {\n      no: 48,\n      value: 'mutual_savings_and_finance_company_union',\n      label: '상호신용금고연합회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.MUTUAL_SAVINGS_N_FIN_CO,\n    },\n    /** 상호신용보증기금 */\n    MUTUAL_CREDIT_GUARANTEE_FUND: {\n      no: 48,\n      value: 'mutual_credit_guarantee_fund',\n      label: '상호신용보증기금',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.MUTUAL_SAVINGS_N_FIN_CO,\n    },\n\n    /** 자동차운송사업조합 */\n    AUTOMOBILE_TRANSPORT_BIZ_ASSOC: {\n      no: 49,\n      value: 'automobile_transport_business_association',\n      label: '자동차운송사업조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.AUTO_TRANS_BIZ,\n    },\n    /** 자동차운송사업연합회 */\n    AUTOMOBILE_TRANSPORT_BIZ_UNION: {\n      no: 49,\n      value: 'automobile_transport_business_union',\n      label: '자동차운송사업연합회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.AUTO_TRANS_BIZ,\n    },\n\n    /** 단위공업협동조합 */\n    UNIT_IND_COOP: {\n      no: 50,\n      value: 'unit_industry_cooperatives',\n      label: '단위공업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.MANUFACTURING_IND_COOP,\n    },\n    /** 특수공업협동조합 */\n    SPECIAL_IND_COOP: {\n      no: 50,\n      value: 'special_industry_cooperatives',\n      label: '특수공업협동조합',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.MANUFACTURING_IND_COOP,\n    },\n    /** 공업협동조합중앙회 */\n    IND_COOP_CENTER: {\n      no: 50,\n      value: 'industry_cooperatives_center',\n      label: '공업협동조합중앙회',\n      type: Corporation.types.SPECIAL,\n      legalBasis: Corporation.legalBasis.MANUFACTURING_IND_COOP,\n    },\n\n    /** 분류할 수 없는 법인 */\n    UNCATEGORIZED_CORPORATION: {\n      no: 71,\n      value: 'uncategorized_corporation',\n      label: '분류할 수 없는 법인',\n      type: Corporation.types.ETC,\n      legalBasis: null,\n    },\n\n    /** 외국 주식회사 */\n    FOREIGN_CORPORATION: {\n      no: 81,\n      value: 'foreign_corporation',\n      label: '주식회사',\n      type: Corporation.types.FOREIGN,\n      legalBasis: null,\n    },\n    /** 외국 합명회사 */\n    FOREIGN_UNLIMITED: {\n      no: 82,\n      value: 'foreign_unlimited',\n      label: '합명회사',\n      type: Corporation.types.FOREIGN,\n      legalBasis: null,\n    },\n    /** 외국 합자회사 */\n    FOREIGN_PARTNERSHIP: {\n      no: 83,\n      value: 'foreign_partnership',\n      label: '합자회사',\n      type: Corporation.types.FOREIGN,\n      legalBasis: null,\n    },\n    /** 외국 유한회사 */\n    FOREIGN_LIMITED: {\n      no: 84,\n      value: 'foreign_limited',\n      label: '유한회사',\n      type: Corporation.types.FOREIGN,\n      legalBasis: null,\n    },\n    /** 외국 기타 */\n    FOREIGN_OTHER: {\n      no: 85,\n      value: 'foreign_other',\n      label: '기타',\n      type: Corporation.types.FOREIGN,\n      legalBasis: null,\n    },\n  };\n}\n\n/**\n * 법인종류별 분류번호 추출\n *\n * @private\n * @function\n * @param registrationNo    법인번호\n * @return {string}         법인종류별 분류번호\n */\nfunction extractCategoryNo(registrationNo) {\n  return registrationNo.substr(4, 2) >> 0;\n}\n\nexport default Corporation;\n","import isCompanyRegistrationNo from './isCompanyRegistrationNo';\nimport isCorporateRegistrationNo from './isCorporateRegistrationNo';\nimport getCorpType from './getCorpType';\nimport Corporation from './Corporation';\n/**\n * 회사관련 도구모음\n */\nexport default {\n  /** 사업자 등록번호 유효성 검사 */\n  isCompanyRegistrationNo,\n\n  /** 법인 등록번호 유효성 검사 */\n  isCorporateRegistrationNo,\n\n  /** 법인번호에서 법인분류정보 추출 */\n  getCorporationType: getCorpType,\n\n  /** 법인 */\n  Corporation,\n};\n","import StringUtils from '../utils/string-utils';\n\n/**\n * 사업자 등록번호 유효성 검사\n *\n * @param {string} registrationNo 사업자등록번호\n * @returns {boolean} 사업자등록번호 유효성\n */\nexport default function isCompanyRegistrationNo(registrationNo) {\n  const rn = `${registrationNo}`.trim().split('-').join(''); // 하이픈(-)이 있을경우 제거\n\n  // 사업자 등록번호 형태의 문자열이 아님\n  if (!StringUtils.isNumeric(rn) || rn.length !== 10) {\n    return false;\n  }\n  const checkSet = [1, 3, 7, 1, 3, 7, 1, 3, 5];\n  let checkSum = 0;\n\n  checkSet.forEach((d, i) => {\n    checkSum += d * rn[i];\n  });\n\n  checkSum += parseInt((checkSet[8] * rn[8]) / 10, 10);\n  return Math.floor(rn[9]) === (10 - (checkSum % 10)) % 10;\n}\n","import Corporation from './Corporation';\n\n/**\n * 법인번호에서 법인종류 가져오기\n *\n * @see Corporation#getType\n * @param registrationNo 법인번호\n *\n * @author hkcho\n */\nexport default function getCorpType(registrationNo) {\n  const corporation = new Corporation({\n    registrationNo,\n  });\n\n  // 법인등록번호 유효성 검사\n  if (!corporation.isValidCorpRegistrationNo()) return null;\n\n  return corporation.getType();\n}\n","export { HANGEUL_BASE, HANGEUL_END };\n/** 가 */\nconst HANGEUL_BASE = 0xac00;\nconst HANGEUL_END = 0xd7af;\nconst JONG_LIST = [\n  '',\n  'ㄱ',\n  'ㄲ',\n  'ㄳ',\n  'ㄴ',\n  'ㄵ',\n  'ㄶ',\n  'ㄷ',\n  'ㄹ',\n  'ㄺ',\n  'ㄻ',\n  'ㄼ',\n  'ㄽ',\n  'ㄾ',\n  'ㄿ',\n  'ㅀ',\n  'ㅁ',\n  'ㅂ',\n  'ㅄ',\n  'ㅅ',\n  'ㅆ',\n  'ㅇ',\n  'ㅈ',\n  'ㅊ',\n  'ㅋ',\n  'ㅌ',\n  'ㅍ',\n  'ㅎ',\n];\nexport const JONG = {\n  // 'ㄹ'의 종성 인덱스\n  RIEUL_IDX: JONG_LIST.indexOf('ㄹ'),\n};\n","export { GISUSA_DIGITS_1, GISUSA_DIGITS_10, GISUSA_DIGITS_100, GISUSA_TYPES };\n\n/**\n * 기수사 1의 자리 상수\n */\nconst GISUSA_DIGITS_1 = [\n  { num: 0, label: '영' },\n  { num: 1, label: '일' },\n  { num: 2, label: '이' },\n  { num: 3, label: '삼' },\n  { num: 4, label: '사' },\n  { num: 5, label: '오' },\n  { num: 6, label: '육' },\n  { num: 7, label: '칠' },\n  { num: 8, label: '팔' },\n  { num: 9, label: '구' },\n];\n\n/**\n * 기수사 반복단위 (10)\n */\nconst GISUSA_DIGITS_10 = [\n  [0, ''],\n  [10, '십'],\n  [100, '백'],\n  [1000, '천'],\n];\n\n/**\n * 기수사 단위 (100)\n */\nconst GISUSA_DIGITS_100 = [\n  [1, ''],\n  [1e4, '만'],\n  [1e8, '억'],\n  [1e12, '조'],\n  [1e16, '경'],\n  [1e20, '해'],\n  [1e24, '자'],\n  [1e28, '양'],\n  [1e32, '구'],\n  [1e36, '간'],\n];\n\n/**\n * 기수사 타입\n */\nconst GISUSA_TYPES = Object.freeze({\n  /** 일반 */\n  NORMAL: 1, // 1110 => 천백십\n  /** 은행 */\n  BANK: 2, // 1110 => 일천일백일십\n});\n","import {\n  GISUSA_DIGITS_1,\n  GISUSA_DIGITS_10,\n  GISUSA_DIGITS_100,\n  GISUSA_TYPES,\n} from './constants';\n\n/**\n *  숫자를 한자어 셈낱씨(기수사)로 변환합니다.\n *\n *  참고1: [한국어 수사]{@link https://ko.wiktionary.org/wiki/%EB%B6%80%EB%A1%9D:%ED%95%9C%EA%B5%AD%EC%96%B4_%EC%88%98%EC%82%AC}\n *  참고2: [음수 한글표현]{@link https://www.korean.go.kr/front/onlineQna/onlineQnaView.do?mn_id=216&qna_seq=90574}\n *  참고3: [만단위 띄어쓰기]{@link https://kornorms.korean.go.kr/regltn/regltnView.do?regltn_code=0001&regltn_no=264#a264}\n *\n * <pre>\n *     minine.hangeul.susa.numberToGisusa(1)      => 일\n *     minine.hangeul.susa.numberToGisusa(2)      => 이\n *     minine.hangeul.susa.numberToGisusa(1024)   => 천삼백이십사\n *\n *     minine.hangeul.susa.numberToGisusa(123456) => 십이만삼천사백오십육\n *     minine.hangeul.susa.numberToGisusa(123456, true) => 십이만 삼천사백오십육\n *     minine.hangeul.susa.numberToGisusa(123456, GISUSA_TYPES.BANK)   => 일십이만삼천사백오십육\n *     minine.hangeul.susa.numberToGisusa(123456, GISUSA_TYPES.BANK, true)   => 일십이만 삼천사백오십육\n * </pre>\n *\n * @param {string | number} number  한글 기수사로 변환할 수 또는 numeric string\n * @param {number} type 기수사 형태\n * @param {boolean} spacing 만단위 띄어쓰기\n * @return {string} 기수사로 변환된 단어\n *\n * @author hkcho\n */\nexport default function numberToGisusa(\n  number,\n  type = GISUSA_TYPES.NORMAL,\n  spacing = false\n) {\n  // 유효한 'number'?\n  if (typeof number === 'string') number = number.replace(',', '');\n  if (Number.isNaN(number)) {\n    return number;\n  }\n\n  // Optional option.\n  if (typeof type === 'boolean') {\n    spacing = type;\n    type = GISUSA_TYPES.NORMAL;\n  }\n\n  let num = parseFloat(number);\n  if (num === 0) return GISUSA_DIGITS_1[0].label;\n\n  // 음수여부 => 음수표현근거 (https://www.korean.go.kr/front/onlineQna/onlineQnaView.do?mn_id=216&qna_seq=90574)\n  const IS_NEGATIVE = num < 0;\n  if (IS_NEGATIVE) num *= -1;\n\n  // 기수사 변환 가능한 최대 수\n  const [biggest] = GISUSA_DIGITS_100[GISUSA_DIGITS_100.length - 1];\n  const maxLen = Math.ceil(Math.log10(biggest + 1)) + 3; // 십x, 백x, 천x (3개)\n\n  // 변환할 숫자의 자리수\n  const numLen = Math.ceil(Math.log10(num + 1));\n\n  // 기수사로 변환 가능한 범위를 넘어서버림\n  if (maxLen < numLen) return number;\n\n  const [numStr, decimalPlaces] = toFixedString(num).split('.');\n\n  // 기수사로 변환된 결과 = 만단위로 쪼개서 역순한 후 한글로 변환\n  const converted = numStr\n    .split('')\n    .reverse()\n    .join('')\n    .match(/.{1,4}/g)\n    .map((bunch, idx) => {\n      const kor = [];\n      bunch.split('').forEach((char, at) => {\n        const n = char >> 0;\n        let s;\n        if (n > 0) {\n          s = GISUSA_DIGITS_1[n].label;\n          if (at > 0) {\n            if (n === 1 && type !== GISUSA_TYPES.BANK) {\n              s = `${GISUSA_DIGITS_10[at][1]}`;\n            } else {\n              s += `${GISUSA_DIGITS_10[at][1]}`;\n            }\n          }\n          kor.push(s);\n        }\n      });\n\n      // 만단위\n      const bunchSuffix = kor.length > 0 ? GISUSA_DIGITS_100[idx][1] : '';\n      return `${kor.reverse().join('')}${bunchSuffix}`;\n    });\n\n  // 역순한 변환 기수사 합치기, 만단위 띄어쓰기 옵션(spacing) 적용\n  const result = converted.reverse().join(spacing ? ' ' : '');\n\n  // 소수점 자리 한글\n  let dpStr = '';\n\n  // 소수점 자리 표현\n  if (decimalPlaces) {\n    dpStr = '점';\n    if (decimalPlaces >> 0 > 0) {\n      decimalPlaces.split('').forEach((dn) => {\n        dpStr += GISUSA_DIGITS_1[dn >> 0].label;\n      });\n    } else dpStr += GISUSA_DIGITS_1[0].label;\n  }\n\n  // 음수일 경우 앞에 '-' 붙이기\n  return `${IS_NEGATIVE ? '-' : ''}${result}${dpStr}`;\n}\n\n// 1e+8 형태의 number를 '100000000' string으로 변환\nfunction toFixedString(x) {\n  if (Math.abs(x) < 1.0) {\n    const e = parseInt(x.toString().split('e-')[1], 10);\n    if (e) {\n      x *= 10 ** (e - 1);\n      x = `0.${new Array(e).join('0')}${x.toString().substring(2)}`;\n    }\n  } else {\n    let e = parseInt(x.toString().split('+')[1], 10);\n    if (e > 20) {\n      e -= 20;\n      x /= 10 ** e;\n      x += new Array(e + 1).join('0');\n    }\n  }\n  return `${x}`;\n}\n","import { HANGEUL_BASE } from './josa/constants';\n\n/**\n * 낱말의 종성 인덱스 확인\n * @param word 단어\n * @return {number} 종성 인덱스\n */\nexport default function getJongseongIndex(word) {\n  // 마지막 단어\n  let lastChar = `${word}`.charAt(word.length - 1);\n  return (lastChar.charCodeAt(0) - HANGEUL_BASE) % 28;\n}\n","import { HANGEUL_BASE } from './josa/constants';\nimport numberToGisusa from './susa/numberToGisusa';\nimport getJongseongIndex from './getJongseongIndex';\n\n/**\n * <h3>단어의 마지막 글자가 받침을 가지고 있는지 확인합니다</h3>\n *  - 한글단어 지원\n *  - 숫자 지원\n * <br/>\n * @example\n * hangeul.isEndWithBatchim('조현권'); // returns true\n * @example\n * hangeul.isEndWithBatchim('유혜지'); // returns false\n * @example\n * hangeul.isEndWithBatchim(21); // returns true; '이십일'\n * @example\n * hangeul.isEndWithBatchim(22); // returns false; '이십이'\n *\n * @param {string|number} word 단어\n * @return {boolean} 받침 유무 여부\n */\nexport default function isEndWithBatchim(word) {\n  if (typeof word === 'undefined' || word === null) return false;\n\n  // 마지막 단어\n  let lastChar = `${word}`.charAt(word.length - 1);\n\n  // 숫자일 경우 기수사로 변경\n  if (/\\d/.test(lastChar)) {\n    lastChar = numberToGisusa(lastChar);\n  }\n\n  // TODO 알파벳으로 마무리 될 때 종성을 처리할 수 있는 규칙이 있을까?\n\n  // 0 = 받침 없음\n  return getJongseongIndex(lastChar) !== 0;\n}\n","import isEndWithBatchim from '../isEndWithBatchim';\nimport getJongseongIndex from '../getJongseongIndex';\nimport { JONG } from './constants';\n\n// 받침에 따라 달라지는 조사 처리\nexport default function getJosa(word, josa) {\n  const hasJong = isEndWithBatchim(word);\n  if (josa === '을' || josa === '를') return hasJong ? '을' : '를';\n  if (josa === '은' || josa === '는') return hasJong ? '은' : '는';\n  if (josa === '이' || josa === '가') return hasJong ? '이' : '가';\n  if (josa === '와' || josa === '과') return hasJong ? '과' : '와';\n  if (josa === '로' || josa === '으로') {\n    if (hasJong) {\n      return getJongseongIndex(word) === JONG.RIEUL_IDX ? '로' : '으로';\n    }\n    return '로';\n  }\n  return '';\n}\n","import eulreul from './eulreul';\nimport eunneun from './eunneun';\nimport eulo from './eulo';\nimport iga from './iga';\nimport wagwa from './wagwa';\n\nexport default {\n  eulreul,\n  eunneun,\n  eulo,\n  iga,\n  wagwa,\n};\n","import josa from './josa';\nimport susa from './susa';\nimport isEndWithBatchim from './isEndWithBatchim';\n\n/**\n * 한글관련 도구모음\n */\nexport default {\n  josa,\n  susa,\n  isEndWithBatchim,\n};\n","import getJosa from './getJosa';\n\n/**\n * <h3>단어 뒤에 올 '을/를' 중 올바른 조사를 반환</h3>\n * <br/>\n * @example\n * hangeul.josa.eulreul('조현권'); // returns '을' - 조현권을\n * @example\n * hangeul.isEndWithBatchim('유혜지'); // returns '를' - 유혜지를\n * @example\n * hangeul.isEndWithBatchim(21); // returns true; '을' - 21을\n * @example\n * hangeul.isEndWithBatchim(22); // returns false; '를' - 22를\n *\n * @param {string|number} word 단어\n * @return {string} '을' 또는 '를'\n */\nexport default function eulreul(word) {\n  return getJosa(word, '을');\n}\n","import getJosa from './getJosa';\n\n/**\n * <h3>단어 뒤에 올 '은/는' 중 올바른 조사를 반환</h3>\n * <br/>\n * @example\n * hangeul.josa.eulreul('조현권'); // returns '은' - 조현권은\n * @example\n * hangeul.isEndWithBatchim('유혜지'); // returns '는' - 유혜지는\n * @example\n * hangeul.isEndWithBatchim(21); // returns true; '은' - 21은\n * @example\n * hangeul.isEndWithBatchim(22); // returns false; '는' - 22는\n *\n * @param {string|number} word 단어\n * @return {string} '은' 또는 '는'\n */\nexport default function eulreul(word) {\n  return getJosa(word, '은');\n}\n","import getJosa from './getJosa';\n\n/**\n * <h3>단어 뒤에 올 '으/으로' 중 올바른 조사를 반환</h3>\n * <br/>\n * @example\n * hangeul.josa.eulreul('조현권'); // returns '으로' - 조현권으로\n * @example\n * hangeul.isEndWithBatchim('이메일'); // returns '로' - 이메일로\n *\n * @param {string|number} word 단어\n * @return {string} '로' 또는 '으로'\n */\nexport default function eulreul(word) {\n  return getJosa(word, '로');\n}\n","import getJosa from './getJosa';\n\n/**\n * <h3>단어 뒤에 올 '이/가' 중 올바른 조사를 반환</h3>\n * <br/>\n * @example\n * hangeul.josa.eulreul('조현권'); // returns '이' - 조현권이\n * @example\n * hangeul.isEndWithBatchim('유혜지'); // returns '가' - 유혜지가\n * @example\n * hangeul.isEndWithBatchim(21); // returns true; '이' - 21이\n * @example\n * hangeul.isEndWithBatchim(22); // returns false; '가' - 22가\n *\n * @param {string|number} word 단어\n * @return {string} '이' 또는 '가'\n */\nexport default function eulreul(word) {\n  return getJosa(word, '이');\n}\n","import getJosa from './getJosa';\n\n/**\n * <h3>단어 뒤에 올 '와/과' 중 올바른 조사를 반환</h3>\n * <br/>\n * @example\n * hangeul.josa.eulreul('조현권'); // returns '과' - 조현권과\n * @example\n * hangeul.isEndWithBatchim('유혜지'); // returns '와' - 유혜지와\n * @example\n * hangeul.isEndWithBatchim(21); // returns true; '과' - 21과\n * @example\n * hangeul.isEndWithBatchim(22); // returns false; '와' - 22와\n *\n * @param {string|number} word 단어\n * @return {string} '와' 또는 '과'\n */\nexport default function eulreul(word) {\n  return getJosa(word, '와');\n}\n","import numberToGisusa from './numberToGisusa';\n\nexport default {\n  numberToGisusa,\n};\n","export default validateEmail;\n\n/**\n * <h3>이메일 주소 유효성 검사</h3>\n * <i>현존하는 이메일 주소의 99.99%에 대해 유효성검사가 가능합니다.</i>\n * <p>정규표현식은 `RFC 5332` 공식 표준에 근거합니다.</p>\n * <br/>\n * @example\n * misc.validateEmail('eddie88cho@gmail.com');  // returns true\n * @example\n * misc.validateEmail('invalid_char😀@test.com');  // returns false\n *\n * @param {string} email 이메일주소\n * @return {boolean}  이메일 유효성\n *\n * @author hkcho\n */\nfunction validateEmail(email) {\n  return EMAIL_REGEX.test(email);\n}\n\n/**\n * 이메일 주소 정규표현식\n *  - [RFC 5332]{@link https://www.ietf.org/rfc/rfc5322.txt} 공식 표준에 따른 이메일 주소 정규식\n *\n * @type {RegExp}\n */\nconst EMAIL_REGEX =\n  /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","export default validateURL;\n\n/**\n * <h3>URL 정규식 검사</h3>\n * <br/>\n * @example\n * misc.validateURL('https://github.com/hkcho');  // returns true\n * @example\n * misc.validateURL('svn://private.eddie88cho.com');  // returns true\n * @example\n * misc.validateURL('mariadb://localhost:3306');  // returns true\n *\n * @param {string} urlStr  URL 주소\n * @return {boolean} URL 유효성\n *\n * @author hkcho\n */\nfunction validateURL(urlStr) {\n  return URL_REGEX.test(urlStr);\n}\n\n/**\n * URL 정규표현식\n *\n * @type {RegExp}\n */\nconst URL_REGEX =\n  /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[\\-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9\\.\\-]+|(?:www\\.|[\\-;:&=\\+\\$,\\w]+@)[A-Za-z0-9\\.\\-]+)((?:\\/[\\+~%\\/\\.\\w\\-_]*)?\\??(?:[\\-\\+=&;%@\\.\\w_]*)#?(?:[\\.\\!\\/\\\\\\w]*))?)/;\n","export default validateIPv4;\n\n/**\n * <h3>IPv4 주소 검사</h3>\n * <pre>\n *  IPv4주소는 인터넷주소자원 관리기관에서 부여한 네트워크 주소와 네트워크 상의 개별 호스트를 식별하기\n * 위하여 네트워크 관리자가 부여한 호스트 주소로 구성됩니다.\n *  IPv4주소는 네트워크의 크기나 호스트의 수에 따라 A, B, C, D, E 클래스로 나누어집니다.\n * A, B, C 클래스는 일반 사용자에게 부여하는 네트워크 구성용, D 클래스는 멀티캐스트용, E 클래스는 향후 사용을 위하여 예약된 주소입니다.\n * </pre>\n * <br/>\n * @example\n * misc.validateIPv4('192.168.0.1');  // returns true\n * @example\n * misc.validateIPv4('192.168.0.1', 'A');  // returns false\n * @example\n * misc.validateIPv4('192.168.0.1', 'B');  // returns false\n * @example\n * misc.validateIPv4('192.168.0.1', 'C');  // returns true\n *\n * @param ipv4 IPv4 주소\n * @param clazz IPv4 클래스\n * @return {boolean} IPv4 주소 유효성\n *\n * @author hkcho\n */\nfunction validateIPv4(ipv4, clazz) {\n  if (typeof clazz === 'string') clazz.toUpperCase();\n\n  let regex;\n  switch (clazz) {\n    // Class A\n    case 'A':\n      regex = IPV4_REGEX_A;\n      break;\n    // Class B\n    case 'B':\n      regex = IPV4_REGEX_B;\n      break;\n    // Class C\n    case 'C':\n      regex = IPV4_REGEX_C;\n      break;\n    // Class D\n    case 'D':\n      regex = IPV4_REGEX_D;\n      break;\n    // Class E\n    case 'E':\n      regex = IPV4_REGEX_E;\n      break;\n    // 모든 클래스\n    default:\n      regex = IPV4_REGEX_ALL;\n  }\n\n  return regex.test(ipv4);\n}\n\n/**\n * Class A IPv4 주소 정규식\n * <pre>\n *   [0~127].[0~255].[0~255].[0~255]\n * </pre>\n * @type {RegExp}\n */\nconst IPV4_REGEX_A =\n  /^(12[0-7]|1[0-1][0-9]|[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\n/**\n * Class B IPv4 주소 정규식\n * <pre>\n *   [128~191].[0~255].[0~255].[0~255]\n * </pre>\n * @type {RegExp}\n */\nconst IPV4_REGEX_B =\n  /^(12[8-9]|1[3-8][0-9]|19[0-1])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\n/**\n * Class C IPv4 주소 정규식\n * <pre>\n *   [192~223].[0~255].[0~255].[0~255]\n * </pre>\n * @type {RegExp}\n */\nconst IPV4_REGEX_C =\n  /^(19[2-9]|2[0-1][0-9]|22[0-3])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\n/**\n * Class D IPv4 주소 정규식\n * <pre>\n *   [224~239].[0~255].[0~255].[0~255]\n * </pre>\n * @type {RegExp}\n */\nconst IPV4_REGEX_D =\n  /^(22[0-4]|23[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\n/**\n * Class E IPv4 주소 정규식\n * <pre>\n *   [240~255].[0~255].[0~255].[0~255]\n * </pre>\n * @type {RegExp}\n */\nconst IPV4_REGEX_E =\n  /^(24[0-9]|25[0-5])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\n/**\n * IPv4 주소 정규식\n *  - Class A ~ E\n *\n * @type {RegExp}\n */\nconst IPV4_REGEX_ALL =\n  /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n","import validateEmail from './validateEmail';\nimport validateURL from './validateURL';\nimport validateIPv4 from './validateIPv4';\n\nexport default {\n  // 이메일 주소 유효성검사\n  validateEmail,\n  // URL 주소 유효성검사\n  validateURL,\n  // IPv4 주소 유효성검사\n  validateIPv4,\n};\n","import saram from './saram';\nimport company from './company';\nimport hangeul from './hangeul';\nimport misc from './misc';\n\nconst mirine = {\n  saram, // 사람관련 기능\n  company, // 사업자 관련 기능\n  hangeul, // 한글 관련 기능\n  misc, // 정의되지 않은 기능\n};\n\nexport default mirine;\n\nexport { saram };\nexport { company };\nexport { hangeul };\nexport { misc };\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","StringUtils","str","test","Number","isNaN","parseFloat","REGEX_COMPLETE_KOREAN","validateRegistrationNumber","registrationNo","type","rn","trim","split","join","length","checkSum","i","substr","rrnMatch","frnMatch","RegNoTypes","RRN","FRN","freeze","validateKoreanName","name","match","Gender","FEMALE","MALE","isRegistrationNo","isJuminRegistrationNo","isForeignRegistrationNo","getGender","birthYear","regno0","bYear","r0","isCorporateRegistrationNo","Corporation","corporationData","this","isValidCorpRegistrationNo","categoryNo","extractCategoryNo","keys","category","categoryNm","no","legalBasis","COMMERCIAL","label","CIVIL","SPECIAL","FOREIGN","ETC","types","PRIVATE_SCHOOL","SOCIAL_WORKER","MEDICAL","CERTIFIED_ACCOUNTANT","BANK_OF_KOREA","ALPC_COOP","LIVESTOCK_COOP","FISHERIES_COOP","FORESTRY_COOP","SMALL_MEDIUM_ENTERPRISE_COOP","CREDIT_COOP","ALPC_CMTY_MODERN_PROMO","LABOR_UNION","CMTY_CREDIT_COOP","MEDICAL_INS_ASSOC","ATTORNEYS","CHAMBERS_OF_COMM_N_IND","MUTUAL_SAVINGS_N_FIN_CO","AUTO_TRANS_BIZ","MANUFACTURING_IND_COOP","CORPORATION","UNLIMITED","PARTNERSHIP","LIMITED","INCORPORATED_ASSOCIATION","FOUNDATION","EDUCATIONAL_FOUNDATION","SOCIAL_WELFARE","ACCOUNTING_FIRM","SPECIAL_CASE_BANK","UNIT_ALPC_COOP","SPECIAL_ALPC_COOP","ALPC_COOP_CENTER","PROVINCE_LIVESTOCK_COOP","LIVESTOCK_COOP_BY_BIZ","LIVESTOCK_COOP_CENTER","PROVINCE_FISHERIES_COOP","FISHERIES_COOP_BY_BIZ","FISHERIES_MANUFACTURAL_COOP","FISHERIES_COOP_CENTER","FISHERIES_IND_COOP","FISHING_VIL_FRTRNT","FORESTRY_COOP_CENTER","FOREST_VIL_FRTRNT","PROVINCE_SMALL_MEDIUM_ENTERPRISE_COOP","SMALL_MEDIUM_ENTERPRISE_COOP_BY_BIZ","SMALL_MEDIUM_ENTERPRISE_COOP_UNION_BY_BIZ","SMALL_MEDIUM_ENTERPRISE_COOP_CENTER","CREDIT_COOP_UNION","FARMLAND_IMPRV_COOP","FARMLAND_IMPRV_COOP_UNION","AGRICULTURAL_DEV_CORP","CMTY_CREDIT_COOP_UNION","LAW_FIRM","MUTUAL_SAVINGS_N_FIN_CO_UNION","MUTUAL_CREDIT_GUARANTEE_FUND","AUTOMOBILE_TRANSPORT_BIZ_ASSOC","AUTOMOBILE_TRANSPORT_BIZ_UNION","UNIT_IND_COOP","SPECIAL_IND_COOP","IND_COOP_CENTER","UNCATEGORIZED_CORPORATION","FOREIGN_CORPORATION","FOREIGN_UNLIMITED","FOREIGN_PARTNERSHIP","FOREIGN_LIMITED","FOREIGN_OTHER","isCompanyRegistrationNo","checkSet","forEach","d","parseInt","Math","floor","getCorporationType","corporation","getType","JONG","indexOf","GISUSA_DIGITS_1","num","GISUSA_DIGITS_10","GISUSA_DIGITS_100","GISUSA_TYPES","NORMAL","BANK","numberToGisusa","number","spacing","replace","IS_NEGATIVE","biggest","maxLen","ceil","log10","numLen","toFixedString","numStr","decimalPlaces","converted","reverse","map","bunch","idx","kor","char","at","s","n","push","bunchSuffix","result","dpStr","dn","x","abs","e","toString","Array","substring","getJongseongIndex","word","charAt","charCodeAt","isEndWithBatchim","lastChar","getJosa","josa","hasJong","eulreul","eunneun","eulo","iga","wagwa","susa","email","EMAIL_REGEX","urlStr","URL_REGEX","ipv4","clazz","toUpperCase","regex","IPV4_REGEX_A","IPV4_REGEX_B","IPV4_REGEX_C","IPV4_REGEX_D","IPV4_REGEX_E","IPV4_REGEX_ALL","validateEmail","validateURL","validateIPv4","saram","company","hangeul","misc"],"sourceRoot":""}